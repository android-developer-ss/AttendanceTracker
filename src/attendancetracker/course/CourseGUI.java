/******************************************************************************
 * Developed By: Snehal V Sutar. 
 * Net ID: svs130130
 * Class Name: CourseGUI
 * Function: UI Layer for ADD/DELETE/MODIFY course. 
 * Patterns: Indirection, Pure Fabrication,Low Coupling.
 ******************************************************************************/

package attendancetracker.course;

import attendancetracker.MainScreen;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author SnehalSutar
 */
public class CourseGUI extends javax.swing.JFrame {

    //Create object to handle the add delete modify function for student. 
      CourseDomainLayer course;
      public static int clickedRowNumber;
      final int FIELD_EMPTY = 99;
      final int FIELDS_FILLED = 1;

    /**
     * Creates new form CourseStruct
     */
    public CourseGUI() {
        course = new CourseDomainLayer();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        homePage = new javax.swing.JButton();
        deleteCourseButton = new javax.swing.JButton();
        modifyCourseButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        courseDetailsTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        courseID = new javax.swing.JTextField();
        courseName = new javax.swing.JTextField();
        courseDesc = new javax.swing.JTextField();
        creditHours = new javax.swing.JTextField();
        courseLevel = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        professorName = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        courseGraded = new javax.swing.JComboBox();
        statusBar = new javax.swing.JLabel();
        refreshButton = new javax.swing.JButton();
        addCourseButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jScrollPane1.setPreferredSize(new java.awt.Dimension(1000, 611));

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));
        jPanel1.setEnabled(false);
        jPanel1.setPreferredSize(new java.awt.Dimension(1000, 611));

        homePage.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        homePage.setText("Home Page");
        homePage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homePageActionPerformed(evt);
            }
        });

        deleteCourseButton.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        deleteCourseButton.setText("Delete Course");
        deleteCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCourseButtonActionPerformed(evt);
            }
        });

        modifyCourseButton.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        modifyCourseButton.setText("Modify Course");
        modifyCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyCourseButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe Print", 1, 24)); // NOI18N
        jLabel1.setText("Course Page");

        courseDetailsTable.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        courseDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Course ID", "Course Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        courseDetailsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                courseDetailsTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(courseDetailsTable);

        jLabel2.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        jLabel2.setText("* Course ID");

        jLabel3.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        jLabel3.setText("* Course Name");

        jLabel4.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        jLabel4.setText("Course Description");

        jLabel5.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        jLabel5.setText("Credit Hours");

        jLabel6.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        jLabel6.setText("Course Level");

        courseID.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        courseID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                courseIDFocusGained(evt);
            }
        });

        courseName.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        courseName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                courseNameFocusGained(evt);
            }
        });

        courseDesc.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N

        creditHours.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        creditHours.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creditHoursActionPerformed(evt);
            }
        });
        creditHours.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                creditHoursKeyPressed(evt);
            }
        });

        courseLevel.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        courseLevel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Graduate", "Under Graduate" }));

        jLabel7.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        jLabel7.setText("Professor");

        professorName.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        jLabel8.setText("Graded ?");

        courseGraded.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        courseGraded.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Yes", "No", " " }));

        statusBar.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        statusBar.setText("Status Bar.");

        refreshButton.setFont(new java.awt.Font("Segoe Print", 1, 12)); // NOI18N
        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        addCourseButton.setText("Add Course");
        addCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCourseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(436, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(164, 164, 164)
                .addComponent(refreshButton)
                .addGap(18, 18, 18)
                .addComponent(homePage)
                .addGap(50, 50, 50))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(courseName)
                        .addComponent(courseID)
                        .addComponent(courseDesc)
                        .addComponent(creditHours, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(courseLevel, 0, 206, Short.MAX_VALUE)
                        .addComponent(professorName))
                    .addComponent(courseGraded, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(116, 116, 116)
                        .addComponent(addCourseButton)
                        .addGap(85, 85, 85)
                        .addComponent(deleteCourseButton)
                        .addGap(48, 48, 48)
                        .addComponent(modifyCourseButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(statusBar, javax.swing.GroupLayout.PREFERRED_SIZE, 932, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(homePage)
                        .addComponent(refreshButton))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(courseID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27)
                                .addComponent(jLabel3))
                            .addComponent(courseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(courseDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(creditHours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(courseLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(courseGraded, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(professorName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteCourseButton)
                    .addComponent(modifyCourseButton)
                    .addComponent(addCourseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusBar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
        );

        jScrollPane1.setViewportView(jPanel1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.LINE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        //Fill the table.
        refreshCourseTable();
        deleteCourseButton.setEnabled(false);
        modifyCourseButton.setEnabled(false);
    }//GEN-LAST:event_formWindowActivated

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        //Refresh the student display table, so that the new entry is visible in
        // the table.
        refreshCourseTable();
        //Refresh all fields.
        refreshAllFields();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void creditHoursKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_creditHoursKeyPressed
        //Allow only Numeric fields to be entered by the user in the code.
        //If user enters anything other than the numbers informative pop up is
        // displayed.
        char c = evt.getKeyChar();
        if (!((c >= '0') && (c <= '9')
            || (c == java.awt.event.KeyEvent.VK_BACK_SPACE)
            || (c == java.awt.event.KeyEvent.VK_DELETE))) {
        getToolkit().beep();
        evt.consume();
        JOptionPane.showMessageDialog(null, "Enter only numbers");
        if (!((c >= '0') && (c <= '9'))) {
            creditHours.setText("");
        }
        }
    }//GEN-LAST:event_creditHoursKeyPressed

    private void creditHoursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creditHoursActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_creditHoursActionPerformed

    private void courseNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_courseNameFocusGained
        courseName.setBackground(Color.white);
    }//GEN-LAST:event_courseNameFocusGained

    private void courseIDFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_courseIDFocusGained
        courseID.setBackground(Color.white);
    }//GEN-LAST:event_courseIDFocusGained

    /***************************************************************************
     * When user clicks a row in the table, the entries in the table row which 
     * is clicked should be displayed in the respective text fields. 
     * @param evt 
     **************************************************************************/
    private void courseDetailsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_courseDetailsTableMouseClicked
        clickedRowNumber = courseDetailsTable.rowAtPoint(evt.getPoint());
        //Check if Row number is an valid row number.
        if (clickedRowNumber >= 0) {
            CourseDomainLayer courseProc = new CourseDomainLayer();
            CourseStruct course = new CourseStruct();
            course = courseProc.getValuesAtRow(clickedRowNumber);
            courseID.setText(course.courseID);
            courseName.setText(course.courseName);
            courseDesc.setText(course.courseDesc);
            creditHours.setText(String.valueOf(course.creditHours));
            courseLevel.setSelectedItem(String.valueOf(course.courseLevel));
            professorName.setText(course.professorName);
            if(course.courseGraded==true)
            courseGraded.setSelectedIndex(0);
            else
            courseGraded.setSelectedIndex(1);

        }
        deleteCourseButton.setEnabled(true);
        modifyCourseButton.setEnabled(true);
    }//GEN-LAST:event_courseDetailsTableMouseClicked

    private void modifyCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyCourseButtonActionPerformed
        String str;
        str = new String();
        CourseDomainLayer courseProc = new CourseDomainLayer();

        CourseStruct courseClicked = new CourseStruct();
        courseClicked.courseID      = courseID.getText();
        courseClicked.courseName    = courseName.getText();
        courseClicked.courseDesc    = courseDesc.getText();
        courseClicked.creditHours   = Integer.parseInt(creditHours.getText());
        courseClicked.courseLevel   = (String) courseLevel.getSelectedItem();
        if(courseGraded.getSelectedIndex() == 0){courseClicked.courseGraded  = true;}
        else  courseClicked.courseGraded  = false;
        courseClicked.professorName = professorName.getText();

        str = courseProc.modifyRecordWithRow(clickedRowNumber,courseClicked);
        statusBar.setText(str);
        //Refresh the student display table, so that the new entry is visible in
        // the table.
        refreshCourseTable();
        //Refresh all fields.
        refreshAllFields();
    }//GEN-LAST:event_modifyCourseButtonActionPerformed

    /***************************************************************************
     * Delete the entry which is being clicked and displayed in the fields. 
     * @param evt 
     **************************************************************************/
    private void deleteCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCourseButtonActionPerformed
        String str;
        str = new String();
        CourseDomainLayer courseProc = new CourseDomainLayer();
        str = courseProc.deleteRecordWithRow(clickedRowNumber);
        statusBar.setText(str);
        //Refresh the student display table, so that the new entry is visible in
        // the table.
        refreshCourseTable();
        //Refresh all fields.
        refreshAllFields();
    }//GEN-LAST:event_deleteCourseButtonActionPerformed

    private void homePageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homePageActionPerformed
        this.setVisible(false);
        dispose();
        MainScreen mainScr = new MainScreen();
        mainScr.setVisible(true);
    }//GEN-LAST:event_homePageActionPerformed
    /***************************************************************************
     * When ADD COURSE button is pressed all the fields should be send to 
     * course processing to add the details to the file. 
     * @param evt 
     **************************************************************************/
    private void addCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCourseButtonActionPerformed
        int errMsg = checkAllFields();
        
        if(errMsg == 0){
        CourseStruct course = new CourseStruct();
        course.courseID      = courseID.getText();
        course.courseName    = courseName.getText();
        course.courseDesc    = courseDesc.getText();
        
        if(creditHours.getText().equals(""))
            course.creditHours = 0;
        else
            course.creditHours   = Integer.parseInt(creditHours.getText());
        
        course.courseLevel   = (String) courseLevel.getSelectedItem();
        if(courseGraded.getSelectedIndex() == 0){course.courseGraded  = true;}
        else  course.courseGraded  = false;            
        course.professorName = professorName.getText();
        
        CourseDomainLayer courseProc = new CourseDomainLayer();
        String msg = courseProc.addCourse(course);
        statusBar.setText(msg);
        //Refresh the student display table, so that the new entry is visible in
        // the table. 
        refreshCourseTable();
        //Refresh all fields. 
        refreshAllFields();
        }
    }//GEN-LAST:event_addCourseButtonActionPerformed

    /***************************************************************************
     * Check if all Fields which are marked as mandatory are filled. If not then
     * set the background of the field to PINK Color.
     * @return 
     **************************************************************************/
    public int checkAllFields(){
        
        int errMsg=0;
        
        if(courseID.getText().equals("")){
            courseID.setBackground(Color.pink);
            errMsg =  FIELD_EMPTY;
        }
        
        if(courseName.getText().equals("")){
            courseName.setBackground(Color.pink);
            errMsg =  FIELD_EMPTY;
        }
        
         if (errMsg == FIELD_EMPTY){
        statusBar.setText("Please fill all the Fields marked in RED.");
        return errMsg;
        }
        return errMsg;
    } 
    /***************************************************************************
     * Reload the Student table from Database and display in the display table.
     **************************************************************************/
    public void refreshCourseTable(){
        DefaultTableModel model = new DefaultTableModel();
        model = course.updateTable(courseDetailsTable);  
        courseDetailsTable.setModel(model);
    }
    
    /***************************************************************************
     * Refresh all the text Fields. Set them to blank. 
     * Reload the table with new entries.
     **************************************************************************/
    public void refreshAllFields(){
        courseID.setText("");
        courseName.setText("");
        courseDesc.setText("");
        creditHours.setText("");
        courseLevel.setSelectedIndex(0);
        professorName.setText("");
        courseGraded.setSelectedIndex(0);
        
        modifyCourseButton.setEnabled(false);
        deleteCourseButton.setEnabled(false);
    }
    
    /**************************************************************************/
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CourseGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CourseGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CourseGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CourseGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CourseGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCourseButton;
    private javax.swing.JTextField courseDesc;
    private javax.swing.JTable courseDetailsTable;
    private javax.swing.JComboBox courseGraded;
    private javax.swing.JTextField courseID;
    private javax.swing.JComboBox courseLevel;
    private javax.swing.JTextField courseName;
    private javax.swing.JTextField creditHours;
    private javax.swing.JButton deleteCourseButton;
    private javax.swing.JButton homePage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton modifyCourseButton;
    private javax.swing.JTextField professorName;
    private javax.swing.JButton refreshButton;
    private javax.swing.JLabel statusBar;
    // End of variables declaration//GEN-END:variables
}
