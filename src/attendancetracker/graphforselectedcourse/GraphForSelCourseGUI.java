/******************************************************************************
 * Developed By: Snehal V Sutar. 
 * Net ID: svs130130
 * Class Name: GraphForSelCourseGUI
 * Function: UI Layer for displaying graph.
 * Patterns: Indirection, Pure Fabrication,Low Coupling.
 ******************************************************************************/

package attendancetracker.graphforselectedcourse;

import attendancetracker.recordattendance.RecordAttGUI;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.geom.Line2D;

/**
 *
 * @author SnehalSutar
 */
public class GraphForSelCourseGUI extends javax.swing.JFrame implements ComponentListener  {

    
    public int XStartPos = 600;
    public int YStartPos = 400;
    public int ScreenWidth;
    public int ScreenHeight;
    public int BAR_WIDTH = 40;           // Width of each bar
    public int BAR_GAP   = 20;           // Distance between each bar
    public int BAR_Multiplier =20;       //Increase Height of the bar by factor
    
    public final int SPACE_BETWEEN_BARS = 5; // Pixels between bars
    final int MONTH_NUMBER = 315;      // Bottom of the values
    String courseID;
    
    final static float dash1[] = {10.0f};
    final static BasicStroke dashed =
        new BasicStroke(1.0f,
                        BasicStroke.CAP_BUTT,
                        BasicStroke.JOIN_MITER,
                        10.0f, dash1, 0.0f);
    
     /**
     * Creates new form GraphForSelCourse
     */
    public GraphForSelCourseGUI() {
        initComponents();
        
        jScrollPane1.addComponentListener(this);
    }
    
    /**
     * Creates new form GraphForSelCourse
     * @param courseID
     */
    public GraphForSelCourseGUI(String courseID) {
        this.courseID = courseID;
        initComponents();
        jScrollPane1.addComponentListener(this);
//        jPanel1.addComponentListener(this);
    }
   

    
    @Override
        public void componentResized(ComponentEvent evt) {
        Component c = (Component)evt.getSource();
        XStartPos = 0;
        YStartPos = 0;
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        //this.setSize(dim);
        //this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        XStartPos = dim.width/2-this.getSize().width/2;
        YStartPos = dim.height/2-this.getSize().height/2;
        ScreenWidth = this.getSize().width;
        ScreenHeight = this.getSize().height;
        super.repaint();           
        }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        backButton = new javax.swing.JButton();
        Heading = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowIconified(java.awt.event.WindowEvent evt) {
                formWindowIconified(evt);
            }
        });
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                jScrollPane1MouseWheelMoved(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 153));

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        Heading.setFont(new java.awt.Font("Segoe Print", 1, 24)); // NOI18N
        Heading.setForeground(new java.awt.Color(0, 0, 153));
        Heading.setText("jLabel1");

        jTextField1.setBackground(new java.awt.Color(0, 0, 204));

        jLabel1.setText("Total Students");

        jTextField2.setBackground(new java.awt.Color(0, 204, 0));

        jLabel2.setText("Present Students");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(113, 113, 113)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 227, Short.MAX_VALUE)
                .addComponent(Heading)
                .addGap(201, 201, 201)
                .addComponent(backButton)
                .addGap(340, 340, 340))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Heading)
                        .addComponent(backButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))))
                .addContainerGap(505, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        //this.setSize(dim);
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        //this.setPreferredSize(dim);
        XStartPos = dim.width/2-this.getSize().width/2;
        YStartPos = dim.height/2-this.getSize().height/2;
        ScreenWidth = this.getSize().width;
        ScreenHeight = this.getSize().height;
        super.repaint();
    }//GEN-LAST:event_formWindowActivated

    private void formWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowStateChanged
        super.repaint();
    }//GEN-LAST:event_formWindowStateChanged

    private void formWindowIconified(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowIconified
        super.repaint();
    }//GEN-LAST:event_formWindowIconified

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        this.dispose();
        RecordAttGUI recAttGUI = new RecordAttGUI();
        recAttGUI.setVisible(true);
    }//GEN-LAST:event_backButtonActionPerformed

    private void jScrollPane1MouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_jScrollPane1MouseWheelMoved
        super.repaint();
    }//GEN-LAST:event_jScrollPane1MouseWheelMoved

    
    
    
    /***************************************************************************
     * Paint the Graph of Students Attendance. 
     * @param g 
     **************************************************************************/
    @Override
     public void paint(Graphics g){
         
         super.paint(g);
         
         int Xonefourth = XStartPos /4;
         int Yonefourth = YStartPos/4;
         XStartPos = XStartPos - Xonefourth;
         YStartPos = YStartPos - Yonefourth;
         YStartPos =+ 500;
         
         
         
         
         Font defFont = g.getFont();
         g.setFont(new Font("default", Font.BOLD, 16));
         g.drawString("Dates",ScreenWidth/2, YStartPos+50);//Dates
         g.drawString("Students",10, ScreenHeight/2);//Dates
         g.setFont(defFont);
         
         XStartPos = XStartPos + 50;
         Graphics2D g2 = (Graphics2D) g;
         g2.setStroke(new BasicStroke(3));
         g2.setColor(Color.black);
         //Drawing X Axis....
         g2.draw(new Line2D.Float(0 , YStartPos+10,ScreenWidth,YStartPos+10));
         //Drawing Y Axis....
         g2.draw(new Line2D.Float(XStartPos-20 , 0+20,XStartPos-20,ScreenHeight));
         //---------------------------------------------------------------------
         // Get the total number of days for which the Attendance is recorded
         // as well as the attendance details for all those days. 
         GraphDomainLayer graphDomLyr = new GraphDomainLayer();
         CourseAbsentPresentStruct[] courseAttArray ;
         courseAttArray = graphDomLyr.getCourseAtt(courseID);
         int numOfDays = graphDomLyr.getNumOfDays();
         Heading.setText("Attendance Graph for: "+courseID);
         if(numOfDays > 9){
             BAR_WIDTH = 10;
         }
//         datesLabel.setText("Dates");
         //---------------------------------------------------------------------
         g.setColor(Color.BLUE);
         g.fillRect(ScreenHeight-500, ScreenWidth-400, 500, 50 );
      
         
         //-------------------------------------------------------------------//
         //Draw the dashed lines for full graph in green color to see the length
         // of bars properly. Also number of students on Y Axis are drawn.
         int x , y;
         x= XStartPos;
         y = YStartPos;
         g.setColor(Color.BLACK);
         for(int i = 0 ; i <=20 ; i++){
             g.setColor(Color.BLACK);
             g.drawString(String.valueOf(i),x-40, y);//number of students
             g.setColor(Color.GREEN);
             g2.setStroke(dashed);
             g2.drawLine(x-15, y, ScreenWidth, y);
             y = y - BAR_Multiplier;
         }
         //-------------------------------------------------------------------//
         //Draw the actual bars based on the number of students present.
         int barHeight;
         String dateStr;
         for(int i= 0; i<numOfDays; i++){
         dateStr = String.valueOf(courseAttArray[i].date);
         
         g.setColor(Color.BLACK);
         if(numOfDays>9)
         g.drawString(dateStr.substring(4),XStartPos, YStartPos +30);//date on x axis
         else
             g.drawString(dateStr,XStartPos, YStartPos +30);//date on x axis
             
         g.setColor(Color.BLUE);
         barHeight = courseAttArray[i].totalStud;
         barHeight = barHeight * BAR_Multiplier;
         g.fillRect(XStartPos, YStartPos-barHeight, BAR_WIDTH, barHeight ); //rectangle for bar
         g.setColor(Color.BLACK);
         //g.drawRect(XStartPos, YStartPos-barHeight, BAR_WIDTH, barHeight ); //rectangle for bar
         
         barHeight = courseAttArray[i].presentStud;
         barHeight = barHeight * BAR_Multiplier;
         g.setColor(Color.GREEN);
         XStartPos = XStartPos + BAR_WIDTH;
         //YStartPos =+ 10;
         g.fillRect(XStartPos, YStartPos-barHeight, BAR_WIDTH, barHeight ); //rectangle for bar
         
         XStartPos = XStartPos + BAR_WIDTH + BAR_GAP;
         }
     }
/******************************************************************************/    
 
 
 /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GraphForSelCourseGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GraphForSelCourseGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GraphForSelCourseGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GraphForSelCourseGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GraphForSelCourseGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Heading;
    private javax.swing.JButton backButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentMoved(ComponentEvent e) {
         Component c = (Component)e.getSource();
            
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        //this.setSize(dim);
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        XStartPos = dim.width/2-this.getSize().width/2;
        YStartPos = dim.height/2-this.getSize().height/2;
        ScreenWidth = this.getSize().width;
        ScreenHeight = this.getSize().height;
        super.repaint();   
    }

    @Override
    public void componentShown(ComponentEvent e) {
        Component c = (Component)e.getSource();
            
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        //this.setSize(dim);
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        XStartPos = dim.width/2-this.getSize().width/2;
        YStartPos = dim.height/2-this.getSize().height/2;
        ScreenWidth = this.getSize().width;
        ScreenHeight = this.getSize().height;
        super.repaint(); 
    }

    @Override
    public void componentHidden(ComponentEvent e) {
        
    }
}
